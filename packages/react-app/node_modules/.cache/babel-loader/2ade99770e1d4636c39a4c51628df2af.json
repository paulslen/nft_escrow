{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nconst DEBUG = false;\n/**\n * A combination of useOnBlock and usePoller\n * helper hook to call a function regularly at time intervals when the block changes\n * @param provider ethers/web3 provider\n * @param callback any function\n * @param args function parameters\n */\n\n/**\n * A combination of useOnBlock and usePoller\n * - the hook will invoke a callback regularly on the \"block\" event.  If a pollTime is provided,\n * it will use that instead.\n * - the hook will invoke the callback when the leadTrigger changes state to true as a leading invokation\n * @param callback (func) :: callback funciton, can have variable args\n * @param options (TOptions)\n * @param args varargs callback function arguments\n */\n\nexport const useOnRepetition = (callback, options, ...args) => {\n  const polling = (options === null || options === void 0 ? void 0 : options.pollTime) && options.pollTime > 0;\n  const leadingCall = useRef(true); // created a stringified args to use for deps\n\n  const argDeps = JSON.stringify(args !== null && args !== void 0 ? args : []);\n  const argsPrimitivesValuesDeps = JSON.stringify(args === null || args === void 0 ? void 0 : args.filter(arg => arg !== Object(arg))); // save the input function provided\n\n  const callFunctionWithArgs = useCallback(() => {\n    if (callback) {\n      if (args && args.length > 0) {\n        void callback(...args);\n      } else {\n        void callback();\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [callback, argDeps, args]); // Turn on the listener if we have a function & a provider\n\n  const listener = useCallback(_blockNumber => {\n    if (options.provider) callFunctionWithArgs();\n  }, [callFunctionWithArgs, options.provider]); // connect a listener for block changes\n\n  useEffect(() => {\n    if (options.provider && !polling) {\n      if (DEBUG) console.log('register block event', ...args);\n      options.provider.addListener('block', listener);\n      return () => {\n        var _a;\n\n        if (DEBUG) console.log('unregister block event', ...args);\n        (_a = options === null || options === void 0 ? void 0 : options.provider) === null || _a === void 0 ? void 0 : _a.removeListener('block', listener);\n      };\n    } else {\n      return () => {\n        /* do nothing */\n      };\n    }\n  }, [options.provider, polling, listener, args]); // Set up the interval if its using polling\n\n  useEffect(() => {\n    const tick = () => {\n      if (DEBUG) console.log('polling: call function');\n      callFunctionWithArgs();\n    };\n\n    if (polling && (options === null || options === void 0 ? void 0 : options.pollTime)) {\n      const safePollTime = (options === null || options === void 0 ? void 0 : options.pollTime) > 10000 ? options.pollTime : 10000;\n      const id = setInterval(tick, safePollTime);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [options.pollTime, polling, callFunctionWithArgs]); // call if triggered by extra watch, however only on inital call\n\n  useEffect(() => {\n    if (options.leadingTrigger && callFunctionWithArgs != null && (leadingCall === null || leadingCall === void 0 ? void 0 : leadingCall.current) === true) {\n      leadingCall.current = false;\n      callFunctionWithArgs();\n    }\n  }, [options.leadingTrigger, callFunctionWithArgs]); // call if the primitive value in args changes\n\n  useEffect(() => {\n    if (options.leadingTrigger && callFunctionWithArgs != null) {\n      callFunctionWithArgs();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [argsPrimitivesValuesDeps, options.leadingTrigger]);\n};","map":{"version":3,"sources":["/home/leniu/dev/nft_escrow/node_modules/eth-hooks/useOnRepetition.js"],"names":["useCallback","useEffect","useRef","DEBUG","useOnRepetition","callback","options","args","polling","pollTime","leadingCall","argDeps","JSON","stringify","argsPrimitivesValuesDeps","filter","arg","Object","callFunctionWithArgs","length","listener","_blockNumber","provider","console","log","addListener","_a","removeListener","tick","safePollTime","id","setInterval","clearInterval","leadingTrigger","current"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,MAAMC,KAAK,GAAG,KAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoB,GAAGC,IAAvB,KAAgC;AAC3D,QAAMC,OAAO,GAAG,CAACF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,QAA3D,KAAwEH,OAAO,CAACG,QAAR,GAAmB,CAA3G;AACA,QAAMC,WAAW,GAAGR,MAAM,CAAC,IAAD,CAA1B,CAF2D,CAG3D;;AACA,QAAMS,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeN,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,EAAzD,CAAhB;AACA,QAAMO,wBAAwB,GAAGF,IAAI,CAACC,SAAL,CAAeN,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACQ,MAAL,CAAaC,GAAD,IAASA,GAAG,KAAKC,MAAM,CAACD,GAAD,CAAnC,CAA3D,CAAjC,CAL2D,CAM3D;;AACA,QAAME,oBAAoB,GAAGlB,WAAW,CAAC,MAAM;AAC3C,QAAIK,QAAJ,EAAc;AACV,UAAIE,IAAI,IAAIA,IAAI,CAACY,MAAL,GAAc,CAA1B,EAA6B;AACzB,aAAKd,QAAQ,CAAC,GAAGE,IAAJ,CAAb;AACH,OAFD,MAGK;AACD,aAAKF,QAAQ,EAAb;AACH;AACJ,KAR0C,CAS3C;;AACH,GAVuC,EAUrC,CAACA,QAAD,EAAWM,OAAX,EAAoBJ,IAApB,CAVqC,CAAxC,CAP2D,CAkB3D;;AACA,QAAMa,QAAQ,GAAGpB,WAAW,CAAEqB,YAAD,IAAkB;AAC3C,QAAIf,OAAO,CAACgB,QAAZ,EACIJ,oBAAoB;AAC3B,GAH2B,EAGzB,CAACA,oBAAD,EAAuBZ,OAAO,CAACgB,QAA/B,CAHyB,CAA5B,CAnB2D,CAuB3D;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,OAAO,CAACgB,QAAR,IAAoB,CAACd,OAAzB,EAAkC;AAC9B,UAAIL,KAAJ,EACIoB,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,GAAGjB,IAAvC;AACJD,MAAAA,OAAO,CAACgB,QAAR,CAAiBG,WAAjB,CAA6B,OAA7B,EAAsCL,QAAtC;AACA,aAAO,MAAM;AACT,YAAIM,EAAJ;;AACA,YAAIvB,KAAJ,EACIoB,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,GAAGjB,IAAzC;AACJ,SAACmB,EAAE,GAAGpB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACgB,QAAhE,MAA8E,IAA9E,IAAsFI,EAAE,KAAK,KAAK,CAAlG,GAAsG,KAAK,CAA3G,GAA+GA,EAAE,CAACC,cAAH,CAAkB,OAAlB,EAA2BP,QAA3B,CAA/G;AACH,OALD;AAMH,KAVD,MAWK;AACD,aAAO,MAAM;AACT;AACH,OAFD;AAGH;AACJ,GAjBQ,EAiBN,CAACd,OAAO,CAACgB,QAAT,EAAmBd,OAAnB,EAA4BY,QAA5B,EAAsCb,IAAtC,CAjBM,CAAT,CAxB2D,CA0C3D;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,IAAI,GAAG,MAAM;AACf,UAAIzB,KAAJ,EACIoB,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACJN,MAAAA,oBAAoB;AACvB,KAJD;;AAKA,QAAIV,OAAO,KAAKF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,QAA/D,CAAX,EAAqF;AACjF,YAAMoB,YAAY,GAAG,CAACvB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,QAA3D,IAAuE,KAAvE,GAA+EH,OAAO,CAACG,QAAvF,GAAkG,KAAvH;AACA,YAAMqB,EAAE,GAAGC,WAAW,CAACH,IAAD,EAAOC,YAAP,CAAtB;AACA,aAAO,MAAM;AACTG,QAAAA,aAAa,CAACF,EAAD,CAAb;AACH,OAFD;AAGH;AACJ,GAbQ,EAaN,CAACxB,OAAO,CAACG,QAAT,EAAmBD,OAAnB,EAA4BU,oBAA5B,CAbM,CAAT,CA3C2D,CAyD3D;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,OAAO,CAAC2B,cAAR,IAA0Bf,oBAAoB,IAAI,IAAlD,IAA0D,CAACR,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACwB,OAAvE,MAAoF,IAAlJ,EAAwJ;AACpJxB,MAAAA,WAAW,CAACwB,OAAZ,GAAsB,KAAtB;AACAhB,MAAAA,oBAAoB;AACvB;AACJ,GALQ,EAKN,CAACZ,OAAO,CAAC2B,cAAT,EAAyBf,oBAAzB,CALM,CAAT,CA1D2D,CAgE3D;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,OAAO,CAAC2B,cAAR,IAA0Bf,oBAAoB,IAAI,IAAtD,EAA4D;AACxDA,MAAAA,oBAAoB;AACvB,KAHW,CAIZ;;AACH,GALQ,EAKN,CAACJ,wBAAD,EAA2BR,OAAO,CAAC2B,cAAnC,CALM,CAAT;AAMH,CAvEM","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nconst DEBUG = false;\n/**\n * A combination of useOnBlock and usePoller\n * helper hook to call a function regularly at time intervals when the block changes\n * @param provider ethers/web3 provider\n * @param callback any function\n * @param args function parameters\n */\n/**\n * A combination of useOnBlock and usePoller\n * - the hook will invoke a callback regularly on the \"block\" event.  If a pollTime is provided,\n * it will use that instead.\n * - the hook will invoke the callback when the leadTrigger changes state to true as a leading invokation\n * @param callback (func) :: callback funciton, can have variable args\n * @param options (TOptions)\n * @param args varargs callback function arguments\n */\nexport const useOnRepetition = (callback, options, ...args) => {\n    const polling = (options === null || options === void 0 ? void 0 : options.pollTime) && options.pollTime > 0;\n    const leadingCall = useRef(true);\n    // created a stringified args to use for deps\n    const argDeps = JSON.stringify(args !== null && args !== void 0 ? args : []);\n    const argsPrimitivesValuesDeps = JSON.stringify(args === null || args === void 0 ? void 0 : args.filter((arg) => arg !== Object(arg)));\n    // save the input function provided\n    const callFunctionWithArgs = useCallback(() => {\n        if (callback) {\n            if (args && args.length > 0) {\n                void callback(...args);\n            }\n            else {\n                void callback();\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [callback, argDeps, args]);\n    // Turn on the listener if we have a function & a provider\n    const listener = useCallback((_blockNumber) => {\n        if (options.provider)\n            callFunctionWithArgs();\n    }, [callFunctionWithArgs, options.provider]);\n    // connect a listener for block changes\n    useEffect(() => {\n        if (options.provider && !polling) {\n            if (DEBUG)\n                console.log('register block event', ...args);\n            options.provider.addListener('block', listener);\n            return () => {\n                var _a;\n                if (DEBUG)\n                    console.log('unregister block event', ...args);\n                (_a = options === null || options === void 0 ? void 0 : options.provider) === null || _a === void 0 ? void 0 : _a.removeListener('block', listener);\n            };\n        }\n        else {\n            return () => {\n                /* do nothing */\n            };\n        }\n    }, [options.provider, polling, listener, args]);\n    // Set up the interval if its using polling\n    useEffect(() => {\n        const tick = () => {\n            if (DEBUG)\n                console.log('polling: call function');\n            callFunctionWithArgs();\n        };\n        if (polling && (options === null || options === void 0 ? void 0 : options.pollTime)) {\n            const safePollTime = (options === null || options === void 0 ? void 0 : options.pollTime) > 10000 ? options.pollTime : 10000;\n            const id = setInterval(tick, safePollTime);\n            return () => {\n                clearInterval(id);\n            };\n        }\n    }, [options.pollTime, polling, callFunctionWithArgs]);\n    // call if triggered by extra watch, however only on inital call\n    useEffect(() => {\n        if (options.leadingTrigger && callFunctionWithArgs != null && (leadingCall === null || leadingCall === void 0 ? void 0 : leadingCall.current) === true) {\n            leadingCall.current = false;\n            callFunctionWithArgs();\n        }\n    }, [options.leadingTrigger, callFunctionWithArgs]);\n    // call if the primitive value in args changes\n    useEffect(() => {\n        if (options.leadingTrigger && callFunctionWithArgs != null) {\n            callFunctionWithArgs();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [argsPrimitivesValuesDeps, options.leadingTrigger]);\n};\n"]},"metadata":{},"sourceType":"module"}