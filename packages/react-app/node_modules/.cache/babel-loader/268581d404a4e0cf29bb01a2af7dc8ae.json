{"ast":null,"code":"var _jsxFileName = \"/home/leniu/dev/nft_escrow/packages/react-app/src/components/Contract/FunctionForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  utils,\n  BigNumber\n} = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = (input === null || input === void 0 ? void 0 : input.name) ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\n\nexport default function FunctionForm({\n  contractFunction,\n  functionInfo,\n  provider,\n  gasPrice,\n  triggerRefresh\n}) {\n  _s();\n\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n  const tx = Transactor(provider, gasPrice);\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n    let buttons = \"\";\n\n    if (input.type === \"bytes32\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to bytes32\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            if (utils.isHexString(form[key])) {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.parseBytes32String(form[key]);\n              setForm(formUpdate);\n            } else {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.formatBytes32String(form[key]);\n              setForm(formUpdate);\n            }\n          },\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"bytes\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to hex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            if (utils.isHexString(form[key])) {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.toUtf8String(form[key]);\n              setForm(formUpdate);\n            } else {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n              setForm(formUpdate);\n            }\n          },\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"uint256\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"* 10 ** 18\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.parseEther(form[key]);\n            setForm(formUpdate);\n          },\n          children: \"\\u2734\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n          placement: \"right\",\n          title: \"blockie\",\n          children: /*#__PURE__*/_jsxDEV(Blockies, {\n            seed: possibleAddress,\n            scale: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: \"large\",\n        placeholder: input.name ? input.type + \" \" + input.name : input.type,\n        autoComplete: \"off\",\n        value: form[key],\n        name: key,\n        onChange: event => {\n          const formUpdate = { ...form\n          };\n          formUpdate[event.target.name] = event.target.value;\n          setForm(formUpdate);\n        },\n        suffix: buttons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  });\n\n  const txValueInput = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"transaction value\",\n      onChange: e => setTxValue(e.target.value),\n      value: txValue,\n      addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \" * 10^18 \",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: async () => {\n                  const floatValue = parseFloat(txValue);\n                  if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                },\n                children: \"\\u2733\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \"number to hex\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: async () => {\n                  setTxValue(BigNumber.from(txValue).toHexString());\n                },\n                children: \"#\\uFE0F\\u20E3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, \"txValueInput\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon = isReadable(functionInfo) ? /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Read\\uD83D\\uDCE1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Send\\uD83D\\uDCB8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n  inputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      onChange: e => setReturnValue(e.target.value),\n      defaultValue: \"\",\n      bordered: false,\n      disabled: true,\n      value: returnValue,\n      suffix: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 50,\n          height: 30,\n          margin: 0\n        },\n        type: \"default\",\n        onClick: async () => {\n          const args = functionInfo.inputs.map((input, inputIndex) => {\n            const key = getFunctionInputKey(functionInfo, input, inputIndex);\n            let value = form[key];\n\n            if ([\"array\", \"tuple\"].includes(input.baseType)) {\n              value = JSON.parse(value);\n            } else if (input.type === \"bool\") {\n              if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                value = 1;\n              } else {\n                value = 0;\n              }\n            }\n\n            return value;\n          });\n          let result;\n\n          if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n            try {\n              const returned = await contractFunction(...args);\n              handleForm(returned);\n              result = tryToDisplayAsText(returned);\n            } catch (err) {\n              console.error(err);\n            }\n          } else {\n            const overrides = {};\n\n            if (txValue) {\n              overrides.value = txValue; // ethers.utils.parseEther()\n            }\n\n            if (gasPrice) {\n              overrides.gasPrice = gasPrice;\n            } // Uncomment this if you want to skip the gas estimation for each transaction\n            // overrides.gasLimit = hexlify(1200000);\n            // console.log(\"Running with extras\",extras)\n\n\n            const returned = await tx(contractFunction(...args, overrides));\n            handleForm(returned);\n            result = tryToDisplay(returned);\n          }\n\n          console.log(\"SETTING RESULT:\", result);\n          setReturnValue(result);\n          triggerRefresh(true);\n        },\n        children: buttonIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, \"goButton\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        style: {\n          textAlign: \"right\",\n          opacity: 0.333,\n          paddingRight: 6,\n          fontSize: 24\n        },\n        children: functionInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        children: inputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FunctionForm, \"b0jDw5H7XuKi4SNr9f+24uTw74I=\");\n\n_c = FunctionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionForm\");","map":{"version":3,"sources":["/home/leniu/dev/nft_escrow/packages/react-app/src/components/Contract/FunctionForm.jsx"],"names":["Button","Col","Divider","Input","Row","Tooltip","React","useState","Blockies","Transactor","tryToDisplay","tryToDisplayAsText","utils","BigNumber","require","getFunctionInputKey","functionInfo","input","inputIndex","name","type","isReadable","fn","stateMutability","FunctionForm","contractFunction","provider","gasPrice","triggerRefresh","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","inputs","map","key","buttons","cursor","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","hexlify","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","length","margin","event","target","value","txValueInput","e","floatValue","parseFloat","from","toHexString","payable","push","handleForm","returned","buttonIcon","marginLeft","width","height","args","includes","baseType","JSON","parse","result","err","console","error","overrides","log","textAlign","opacity","paddingRight","fontSize"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon = isReadable(functionInfo) ? (\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\n  ) : (\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\n  );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}