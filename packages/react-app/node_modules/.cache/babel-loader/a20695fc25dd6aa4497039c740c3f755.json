{"ast":null,"code":"var _jsxFileName = \"/home/leniu/dev/nft_escrow/packages/react-app/src/components/TokenSelect.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Select } from \"antd\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport searchico from \"searchico\"; // helpers to load token name and symbol for unlisted tokens\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC20ABI = [\"function symbol() view returns (string)\", \"function name() view returns (string)\"];\n\nconst loadERC20 = async (address, p) => {\n  try {\n    var _r$name, _r$symbol;\n\n    // load token information here\n    const r = new ethers.Contract(address, ERC20ABI, p);\n    const name = await ((_r$name = r.name) === null || _r$name === void 0 ? void 0 : _r$name.call(r));\n    const symbol = await ((_r$symbol = r.symbol) === null || _r$symbol === void 0 ? void 0 : _r$symbol.call(r));\n    return {\n      name,\n      symbol\n    };\n  } catch (error) {\n    return {};\n  }\n};\n/*\n  <TokenSelect\n    chainId={1}\n    onChange={setToAddress}\n    localProvider={localProvider}\n    nativeToken={{ name: 'Native token', symbol: 'ETH' }}\n  />\n*/\n\n\nexport default function TokenSelect({\n  onChange,\n  chainId = 1,\n  nativeToken = {},\n  localProvider,\n  ...props\n}) {\n  _s();\n\n  const [value, setValue] = useState(null);\n  const [list, setList] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const listCollection = useMemo(() => {\n    return searchico(list, {\n      keys: [\"address\", \"name\", \"symbol\"]\n    });\n  }, [list.length]);\n  const children = useMemo(() => {\n    if (searchResults.length < 1) {\n      return [];\n    } // use search result to format children\n\n\n    return searchResults.map(i => {\n      var _i$address, _i$address2;\n\n      return /*#__PURE__*/_jsxDEV(Select.Option, {\n        style: {\n          paddingTop: \"5px\",\n          paddingBottom: \"5px\"\n        },\n        value: i.address,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [i.logoURI && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginRight: \"5px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: i.logoURI,\n              alt: `${i.name} (${i.symbol})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), i.name, \" - \", i.symbol, \" \", ((_i$address = i.address) === null || _i$address === void 0 ? void 0 : _i$address.substr(0, 5)) + \"...\" + ((_i$address2 = i.address) === null || _i$address2 === void 0 ? void 0 : _i$address2.substr(-4)), \" \", i.unlisted && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontStyle: \"italic\",\n              fontSize: \"12px\",\n              marginLeft: \"3px\"\n            },\n            children: \" (unlisted) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)\n      }, i.address, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this);\n    });\n  }, [JSON.stringify(searchResults)]);\n\n  const handleSearch = async val => {\n    let collectionResult = [];\n\n    if (val.length > 0) {\n      // TODO : Do all search & filtering here\n      collectionResult = ((listCollection === null || listCollection === void 0 ? void 0 : listCollection.find(val)) || []).filter(i => i.chainId === chainId);\n\n      if (collectionResult.length < 1) {\n        const nativeTokenObj = {\n          chainId: chainId,\n          decimals: 18,\n          name: \"Native Token\",\n          symbol: \"ETH\",\n          address: \"0x0000000000000000000000000000000000000000\",\n          logoURI: \"https://assets.coingecko.com/coins/images/279/thumb/ethereum.png?1595348880\",\n          ...nativeToken\n        };\n        collectionResult.push(nativeTokenObj);\n\n        try {\n          const checksumAddress = ethers.utils.getAddress(val); // load contract and try to get name and symbol if there's a provider given\n\n          const tokenInfo = localProvider ? await loadERC20(checksumAddress, localProvider) : {};\n          collectionResult = [{\n            chainId: chainId,\n            name: null,\n            unlisted: true,\n            symbol: null,\n            address: checksumAddress,\n            logoURI: \"\",\n            ...tokenInfo\n          }];\n        } catch (error) {\n          console.log(`Could not identify this token`);\n        }\n      }\n    }\n\n    setSearchResults(collectionResult);\n  };\n\n  const handleOnChange = async e => {\n    setSearchResults([]); // TODO : check if it's an address that's not on list & Add as unlisted\n\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.value);\n    }\n  };\n\n  const loadList = async () => {\n    // https://tokens.coingecko.com/uniswap/all.json\n    const res = await axios.get(\"https://tokens.coingecko.com/uniswap/all.json\");\n    const {\n      tokens\n    } = res.data;\n    setList(tokens);\n  };\n\n  useEffect(() => {\n    loadList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      showSearch: true,\n      size: \"large\",\n      showArrow: false,\n      defaultActiveFirstOption: false,\n      onSearch: handleSearch,\n      filterOption: false,\n      labelInValue: true,\n      id: \"0xERC20TokenSelect\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xERC20TokenSelect\" // name it something other than address for auto fill doxxing\n      ,\n      placeholder: props.placeholder ? props.placeholder : \"Token search... Eg: GTC\",\n      value: value,\n      onChange: handleOnChange,\n      notFoundContent: null,\n      style: {\n        width: \"100%\"\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokenSelect, \"Q5STnDu7EjFYZ+jiJCH02pwazsw=\");\n\n_c = TokenSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenSelect\");","map":{"version":3,"sources":["/home/leniu/dev/nft_escrow/packages/react-app/src/components/TokenSelect.jsx"],"names":["Select","useState","useMemo","useEffect","ethers","axios","searchico","ERC20ABI","loadERC20","address","p","r","Contract","name","symbol","error","TokenSelect","onChange","chainId","nativeToken","localProvider","props","value","setValue","list","setList","searchResults","setSearchResults","listCollection","keys","length","children","map","i","paddingTop","paddingBottom","display","alignItems","logoURI","marginRight","substr","unlisted","fontStyle","fontSize","marginLeft","JSON","stringify","handleSearch","val","collectionResult","find","filter","nativeTokenObj","decimals","push","checksumAddress","utils","getAddress","tokenInfo","console","log","handleOnChange","e","loadList","res","get","tokens","data","placeholder","width"],"mappings":";;;AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAEA;;;AACA,MAAMC,QAAQ,GAAG,CAAC,yCAAD,EAA4C,uCAA5C,CAAjB;;AAEA,MAAMC,SAAS,GAAG,OAAOC,OAAP,EAAgBC,CAAhB,KAAsB;AACtC,MAAI;AAAA;;AACF;AACA,UAAMC,CAAC,GAAG,IAAIP,MAAM,CAACQ,QAAX,CAAoBH,OAApB,EAA6BF,QAA7B,EAAuCG,CAAvC,CAAV;AACA,UAAMG,IAAI,GAAG,kBAAMF,CAAC,CAACE,IAAR,4CAAM,aAAAF,CAAC,CAAP,CAAb;AACA,UAAMG,MAAM,GAAG,oBAAMH,CAAC,CAACG,MAAR,8CAAM,eAAAH,CAAC,CAAP,CAAf;AAEA,WAAO;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,WAAO,EAAP;AACD;AACF,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAO,GAAG,CAAtB;AAAyBC,EAAAA,WAAW,GAAG,EAAvC;AAA2CC,EAAAA,aAA3C;AAA0D,KAAGC;AAA7D,CAArB,EAA2F;AAAA;;AACxG,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACyB,aAAD,EAAgBC,gBAAhB,IAAoC1B,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM2B,cAAc,GAAG1B,OAAO,CAAC,MAAM;AACnC,WAAOI,SAAS,CAACkB,IAAD,EAAO;AAAEK,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB;AAAR,KAAP,CAAhB;AACD,GAF6B,EAE3B,CAACL,IAAI,CAACM,MAAN,CAF2B,CAA9B;AAIA,QAAMC,QAAQ,GAAG7B,OAAO,CAAC,MAAM;AAC7B,QAAIwB,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,aAAO,EAAP;AACD,KAH4B,CAK7B;;;AACA,WAAOJ,aAAa,CAACM,GAAd,CAAkBC,CAAC;AAAA;;AAAA,0BACxB,QAAC,MAAD,CAAQ,MAAR;AAA+B,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE,KAAd;AAAqBC,UAAAA,aAAa,EAAE;AAApC,SAAtC;AAAmF,QAAA,KAAK,EAAEF,CAAC,CAACxB,OAA5F;AAAA,+BACE;AAAK,UAAA,KAAK,EAAE;AAAE2B,YAAAA,OAAO,EAAE,MAAX;AAAmBC,YAAAA,UAAU,EAAE;AAA/B,WAAZ;AAAA,qBACGJ,CAAC,CAACK,OAAF,iBACC;AAAK,YAAA,KAAK,EAAE;AAAEC,cAAAA,WAAW,EAAE;AAAf,aAAZ;AAAA,mCACE;AAAK,cAAA,GAAG,EAAEN,CAAC,CAACK,OAAZ;AAAqB,cAAA,GAAG,EAAG,GAAEL,CAAC,CAACpB,IAAK,KAAIoB,CAAC,CAACnB,MAAO;AAAjD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAMGmB,CAAC,CAACpB,IANL,SAMcoB,CAAC,CAACnB,MANhB,OAMyB,eAAAmB,CAAC,CAACxB,OAAF,0DAAW+B,MAAX,CAAkB,CAAlB,EAAqB,CAArB,KAA0B,KAA1B,mBAAkCP,CAAC,CAACxB,OAApC,gDAAkC,YAAW+B,MAAX,CAAkB,CAAC,CAAnB,CAAlC,CANzB,EAMkF,GANlF,EAOGP,CAAC,CAACQ,QAAF,iBAAc;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,SAAS,EAAE,QAAb;AAAuBC,cAAAA,QAAQ,EAAE,MAAjC;AAAyCC,cAAAA,UAAU,EAAE;AAArD,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAAoBX,CAAC,CAACxB,OAAtB;AAAA;AAAA;AAAA;AAAA,cADwB;AAAA,KAAnB,CAAP;AAaD,GAnBuB,EAmBrB,CAACoC,IAAI,CAACC,SAAL,CAAepB,aAAf,CAAD,CAnBqB,CAAxB;;AAqBA,QAAMqB,YAAY,GAAG,MAAMC,GAAN,IAAa;AAChC,QAAIC,gBAAgB,GAAG,EAAvB;;AAEA,QAAID,GAAG,CAAClB,MAAJ,GAAa,CAAjB,EAAoB;AAClB;AACAmB,MAAAA,gBAAgB,GAAG,CAAC,CAAArB,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEsB,IAAhB,CAAqBF,GAArB,MAA6B,EAA9B,EAAkCG,MAAlC,CAAyClB,CAAC,IAAIA,CAAC,CAACf,OAAF,KAAcA,OAA5D,CAAnB;;AAEA,UAAI+B,gBAAgB,CAACnB,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,cAAMsB,cAAc,GAAG;AACrBlC,UAAAA,OAAO,EAAEA,OADY;AAErBmC,UAAAA,QAAQ,EAAE,EAFW;AAGrBxC,UAAAA,IAAI,EAAE,cAHe;AAIrBC,UAAAA,MAAM,EAAE,KAJa;AAKrBL,UAAAA,OAAO,EAAE,4CALY;AAMrB6B,UAAAA,OAAO,EAAE,6EANY;AAOrB,aAAGnB;AAPkB,SAAvB;AAUA8B,QAAAA,gBAAgB,CAACK,IAAjB,CAAsBF,cAAtB;;AAEA,YAAI;AACF,gBAAMG,eAAe,GAAGnD,MAAM,CAACoD,KAAP,CAAaC,UAAb,CAAwBT,GAAxB,CAAxB,CADE,CAEF;;AACA,gBAAMU,SAAS,GAAGtC,aAAa,GAAG,MAAMZ,SAAS,CAAC+C,eAAD,EAAkBnC,aAAlB,CAAlB,GAAqD,EAApF;AACA6B,UAAAA,gBAAgB,GAAG,CACjB;AACE/B,YAAAA,OAAO,EAAEA,OADX;AAEEL,YAAAA,IAAI,EAAE,IAFR;AAGE4B,YAAAA,QAAQ,EAAE,IAHZ;AAIE3B,YAAAA,MAAM,EAAE,IAJV;AAKEL,YAAAA,OAAO,EAAE8C,eALX;AAMEjB,YAAAA,OAAO,EAAE,EANX;AAOE,eAAGoB;AAPL,WADiB,CAAnB;AAWD,SAfD,CAeE,OAAO3C,KAAP,EAAc;AACd4C,UAAAA,OAAO,CAACC,GAAR,CAAa,+BAAb;AACD;AACF;AACF;;AAEDjC,IAAAA,gBAAgB,CAACsB,gBAAD,CAAhB;AACD,GA1CD;;AA4CA,QAAMY,cAAc,GAAG,MAAMC,CAAN,IAAW;AAChCnC,IAAAA,gBAAgB,CAAC,EAAD,CAAhB,CADgC,CAGhC;;AAEAJ,IAAAA,QAAQ,CAACuC,CAAD,CAAR;;AAEA,QAAI,OAAO7C,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAAC6C,CAAC,CAACxC,KAAH,CAAR;AACD;AACF,GAVD;;AAYA,QAAMyC,QAAQ,GAAG,YAAY;AAC3B;AACA,UAAMC,GAAG,GAAG,MAAM3D,KAAK,CAAC4D,GAAN,CAAU,+CAAV,CAAlB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,GAAG,CAACG,IAAvB;AAEA1C,IAAAA,OAAO,CAACyC,MAAD,CAAP;AACD,GAND;;AAQA/D,EAAAA,SAAS,CAAC,MAAM;AACd4D,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,SAAS,EAAE,KAHb;AAIE,MAAA,wBAAwB,EAAE,KAJ5B;AAKE,MAAA,QAAQ,EAAEhB,YALZ;AAME,MAAA,YAAY,EAAE,KANhB;AAOE,MAAA,YAAY,EAAE,IAPhB;AAQE,MAAA,EAAE,EAAC,oBARL,CAQ0B;AAR1B;AASE,MAAA,IAAI,EAAC,oBATP,CAS4B;AAT5B;AAUE,MAAA,WAAW,EAAE1B,KAAK,CAAC+C,WAAN,GAAoB/C,KAAK,CAAC+C,WAA1B,GAAwC,yBAVvD;AAWE,MAAA,KAAK,EAAE9C,KAXT;AAYE,MAAA,QAAQ,EAAEuC,cAZZ;AAaE,MAAA,eAAe,EAAE,IAbnB;AAcE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT,OAdT;AAAA,gBAgBGtC;AAhBH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAxHuBf,W;;KAAAA,W","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { Select } from \"antd\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport searchico from \"searchico\";\n\n// helpers to load token name and symbol for unlisted tokens\nconst ERC20ABI = [\"function symbol() view returns (string)\", \"function name() view returns (string)\"];\n\nconst loadERC20 = async (address, p) => {\n  try {\n    // load token information here\n    const r = new ethers.Contract(address, ERC20ABI, p);\n    const name = await r.name?.();\n    const symbol = await r.symbol?.();\n\n    return { name, symbol };\n  } catch (error) {\n    return {};\n  }\n};\n\n/*\n  <TokenSelect\n    chainId={1}\n    onChange={setToAddress}\n    localProvider={localProvider}\n    nativeToken={{ name: 'Native token', symbol: 'ETH' }}\n  />\n*/\nexport default function TokenSelect({ onChange, chainId = 1, nativeToken = {}, localProvider, ...props }) {\n  const [value, setValue] = useState(null);\n  const [list, setList] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const listCollection = useMemo(() => {\n    return searchico(list, { keys: [\"address\", \"name\", \"symbol\"] });\n  }, [list.length]);\n\n  const children = useMemo(() => {\n    if (searchResults.length < 1) {\n      return [];\n    }\n\n    // use search result to format children\n    return searchResults.map(i => (\n      <Select.Option key={i.address} style={{ paddingTop: \"5px\", paddingBottom: \"5px\" }} value={i.address}>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          {i.logoURI && (\n            <div style={{ marginRight: \"5px\" }}>\n              <img src={i.logoURI} alt={`${i.name} (${i.symbol})`} />\n            </div>\n          )}\n          {i.name} - {i.symbol} {i.address?.substr(0, 5) + \"...\" + i.address?.substr(-4)}{\" \"}\n          {i.unlisted && <span style={{ fontStyle: \"italic\", fontSize: \"12px\", marginLeft: \"3px\" }}> (unlisted) </span>}\n        </div>\n      </Select.Option>\n    ));\n  }, [JSON.stringify(searchResults)]);\n\n  const handleSearch = async val => {\n    let collectionResult = [];\n\n    if (val.length > 0) {\n      // TODO : Do all search & filtering here\n      collectionResult = (listCollection?.find(val) || []).filter(i => i.chainId === chainId);\n\n      if (collectionResult.length < 1) {\n        const nativeTokenObj = {\n          chainId: chainId,\n          decimals: 18,\n          name: \"Native Token\",\n          symbol: \"ETH\",\n          address: \"0x0000000000000000000000000000000000000000\",\n          logoURI: \"https://assets.coingecko.com/coins/images/279/thumb/ethereum.png?1595348880\",\n          ...nativeToken,\n        };\n\n        collectionResult.push(nativeTokenObj);\n\n        try {\n          const checksumAddress = ethers.utils.getAddress(val);\n          // load contract and try to get name and symbol if there's a provider given\n          const tokenInfo = localProvider ? await loadERC20(checksumAddress, localProvider) : {};\n          collectionResult = [\n            {\n              chainId: chainId,\n              name: null,\n              unlisted: true,\n              symbol: null,\n              address: checksumAddress,\n              logoURI: \"\",\n              ...tokenInfo,\n            },\n          ];\n        } catch (error) {\n          console.log(`Could not identify this token`);\n        }\n      }\n    }\n\n    setSearchResults(collectionResult);\n  };\n\n  const handleOnChange = async e => {\n    setSearchResults([]);\n\n    // TODO : check if it's an address that's not on list & Add as unlisted\n\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.value);\n    }\n  };\n\n  const loadList = async () => {\n    // https://tokens.coingecko.com/uniswap/all.json\n    const res = await axios.get(\"https://tokens.coingecko.com/uniswap/all.json\");\n    const { tokens } = res.data;\n\n    setList(tokens);\n  };\n\n  useEffect(() => {\n    loadList();\n  }, []);\n\n  return (\n    <div>\n      <Select\n        showSearch\n        size=\"large\"\n        showArrow={false}\n        defaultActiveFirstOption={false}\n        onSearch={handleSearch}\n        filterOption={false}\n        labelInValue={true}\n        id=\"0xERC20TokenSelect\" // name it something other than address for auto fill doxxing\n        name=\"0xERC20TokenSelect\" // name it something other than address for auto fill doxxing\n        placeholder={props.placeholder ? props.placeholder : \"Token search... Eg: GTC\"}\n        value={value}\n        onChange={handleOnChange}\n        notFoundContent={null}\n        style={{ width: \"100%\" }}\n      >\n        {children}\n      </Select>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}